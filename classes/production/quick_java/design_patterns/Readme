DESIGN PATTERNS
================================================================

# Gamma Categorization:
* Design Patterns are typically split into 3 categories:
    - Creational Patterns
        * Deal with the creation (construction) of objects
        * Explicit (constructor) vs implicit (DI, reflection, etc.)
        * Wholesale (single statement) vs piecewise (step by step)
    - Structural Patterns
        * Concerned with the structure (e.g. class members)
        * Many patterns are wrappers that mimic the underlying class' intervace
        * Stress the importance of good API design
    - Behavioral Patterns
        * They are all different; no central theme


1. Builder Design Pattern
----------------------------------------------------------------
*  Having an object with 10 constructor arguments is not productive. Instead, builder provides an API for constructing
an object step-by-step.
In other words, when piecewise object construction is complicated, provide an API for doing it succinctly.

Q. If you want 'fluent interface' to propagate through sub classes, what needs to be done?
- You need to perform 'RECURSIVE GENERICS'
Note: for fluent interface, see BuilderDemo.java for chaining of methods
for Recursive Generics, see BuilderDemoWithRecursiveGenerics

Q. When your single builder is not sufficient (require several builders), what's the better approach?
- Use Faceted Builder (see FacetedBuilderDemo.java). See how job and address objects are created for "Person" object.

Note: A builder is a separate component for building an object
* can either give builder a constructor or return it via a static function
* to make builder fluent, return this
* Different facets of an object can be built with different builders working in tandem via a base class

2. Factory Method and Abstract Factory
----------------------------------------------------------------
* A component responsible solely for the wholesale (not piecewise) creation of objects
* Why to use
- Same signature constructor, not allowed. Eg: Point class with same signature arguments like Point(double x, double y) and Point(double rho, double theta) OR Triangle Issue
- Sometimes creation logic becomes too convoluted
- Constructor is not descriptive
    . name mandated by name of containing type
    . cannot overload with same sets of arguments with different names
    . can turn into overloading hell
- Wholesale object creation (non-piecewise, unlike Builder) can be outsourced to
    . a separate function (Factory Method)
    . a separate class (Factory Class)
Note: See PointDemo for beginner level.
Intermediate level : see AbstractFactoryDemo - contains hierarchy level factory pattern, but has compilation error.

Summary:
Factory method is a static method that creates objects
Factory can take care of object creation - can be created as separate class
Factory can be external or reside inside the object as an inner class
Hierarchies of factories can be used to create related objects. (see AbstractFactoryDemo.java, but code has some issues need to fix)

3. Prototype design pattern
----------------------------------------------------------------
* A partially or fully initialized object that you copy (clone) and make use of.
When to use: When it's easier to copy an existing object to fully initialize a new one.
Eg; Iphone 14 are not made from scratch, they just copy and existing Iphone versions and make changes.
* Complicated objects (e.g cars) aren't designed from scratch
 - they reiterate existing designs
* An existing (partially or fully constructed) design is a Prototype
* We make a copy (clone) the prototype and customize it
 - requires 'deep copy' i.e copy not only objects but the references as well so that changint it won't effect existing objects
* We make the cloning convenient (e.g via Factory)
Demo: See CopyConstructorDemo.java
        - but if you have a long hierarchy, we need to use serialization so that we don't have to jump to all copy constructor methods
        So, the approach is using Serialization (see CopyThroughSerializationDemo.java)
Q. Learn deep copy and shallow copy

Summary:
To implement a prototype, partially construct an object and store it somewhere
and then clone the prototype using different approach like:
    * implement your own deep copy functionality or
    * serialize and deserialize
Then once made the copy of an object all you need to do is customize the new instance/ resulting instance.
