DESIGN PATTERNS
================================================================

# Gamma Categorization:
* Design Patterns are typically split into 3 categories:
    - Creational Patterns
        * Deal with the creation (construction) of objects
        * Explicit (constructor) vs implicit (DI, reflection, etc.)
        * Wholesale (single statement) vs piecewise (step by step)
    - Structural Patterns
        * Concerned with the structure (e.g. class members)
        * Many patterns are wrappers that mimic the underlying class' intervace
        * Stress the importance of good API design
    - Behavioral Patterns
        * They are all different; no central theme


1. Builder Design Pattern
*  Having an object with 10 constructor arguments is not productive. Instead, builder provides an API for constructing
an object step-by-step.
In other words, when piecewise object construction is complicated, provide an API for doing it succinctly.

Q. If you want 'fluent interface' to propagate through sub classes, what needs to be done?
- You need to perform 'RECURSIVE GENERICS'
Note: for fluent interface, see BuilderDemo.java for chaining of methods
for Recursive Generics, see BuilderDemoWithRecursiveGenerics

Q. When your single builder is not sufficient (require several builders), what's the better approach?
- Use Faceted Builder (see FacetedBuilderDemo.java). See how job and address objects are created for "Person" object.

Note: A builder is a separate component for building an object
* can either give builder a constructor or return it via a static function
* to make builder fluent, return this
* Different facets of an object can be built with different builders working in tandem via a base class



